<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;  &lt;groupId&gt;org.example&lt;/groupId&gt;&#10;  &lt;artifactId&gt;demo&lt;/artifactId&gt;&#10;  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;  &lt;name&gt;demo&lt;/name&gt;&#10;  &lt;packaging&gt;war&lt;/packaging&gt;&#10;&#10;  &lt;properties&gt;&#10;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;maven.compiler.target&gt;24&lt;/maven.compiler.target&gt;&#10;    &lt;maven.compiler.source&gt;24&lt;/maven.compiler.source&gt;&#10;    &lt;junit.version&gt;5.13.2&lt;/junit.version&gt;&#10;  &lt;/properties&gt;&#10;&#10;  &lt;dependencies&gt;&#10;    &lt;dependency&gt;&#10;          &lt;groupId&gt;jakarta.servlet&lt;/groupId&gt;&#10;          &lt;artifactId&gt;jakarta.servlet-api&lt;/artifactId&gt;&#10;          &lt;version&gt;6.1.0&lt;/version&gt;&#10;          &lt;scope&gt;provided&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;      &lt;dependency&gt;&#10;          &lt;groupId&gt;com.cloudinary&lt;/groupId&gt;&#10;          &lt;artifactId&gt;cloudinary-core&lt;/artifactId&gt;&#10;          &lt;version&gt;2.3.0&lt;/version&gt;&#10;      &lt;/dependency&gt;&#10;      &lt;dependency&gt;&#10;          &lt;groupId&gt;io.github.cdimascio&lt;/groupId&gt;&#10;          &lt;artifactId&gt;java-dotenv&lt;/artifactId&gt;&#10;          &lt;version&gt;5.2.2&lt;/version&gt;&#10;      &lt;/dependency&gt;&#10;      &lt;dependency&gt;&#10;          &lt;groupId&gt;com.cloudinary&lt;/groupId&gt;&#10;          &lt;artifactId&gt;cloudinary-http5&lt;/artifactId&gt;&#10;          &lt;version&gt;2.3.2&lt;/version&gt;&#10;      &lt;/dependency&gt;&#10;&#10;&#10;      &lt;dependency&gt;&#10;          &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;          &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&#10;          &lt;version&gt;8.0.33&lt;/version&gt;&#10;      &lt;/dependency&gt;&#10;      &lt;dependency&gt;&#10;      &lt;groupId&gt;jakarta.servlet.jsp.jstl&lt;/groupId&gt;&#10;      &lt;artifactId&gt;jakarta.servlet.jsp.jstl-api&lt;/artifactId&gt;&#10;      &lt;version&gt;3.0.0&lt;/version&gt;&#10;  &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;&#10;        &lt;artifactId&gt;jakarta.servlet.jsp.jstl&lt;/artifactId&gt;&#10;        &lt;version&gt;3.0.1&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;&#10;&#10;    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;      &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;&#10;      &lt;version&gt;${junit.version}&lt;/version&gt;&#10;      &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;      &lt;dependency&gt;&#10;        &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;        &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;&#10;        &lt;version&gt;${junit.version}&lt;/version&gt;&#10;        &lt;scope&gt;test&lt;/scope&gt;&#10;      &lt;/dependency&gt;  &lt;/dependencies&gt;&#10;&#10;  &lt;build&gt;&#10;    &lt;plugins&gt;&#10;&lt;plugin&gt;&#10;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;3.4.0&lt;/version&gt;&#10;      &lt;/plugin&gt;    &lt;/plugins&gt;&#10;  &lt;/build&gt;&#10;&lt;/project&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;  &lt;groupId&gt;org.example&lt;/groupId&gt;&#10;  &lt;artifactId&gt;demo&lt;/artifactId&gt;&#10;  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;  &lt;name&gt;demo&lt;/name&gt;&#10;  &lt;packaging&gt;war&lt;/packaging&gt;&#10;&#10;  &lt;properties&gt;&#10;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;maven.compiler.target&gt;24&lt;/maven.compiler.target&gt;&#10;    &lt;maven.compiler.source&gt;24&lt;/maven.compiler.source&gt;&#10;    &lt;junit.version&gt;5.13.2&lt;/junit.version&gt;&#10;  &lt;/properties&gt;&#10;&#10;  &lt;dependencies&gt;&#10;    &lt;dependency&gt;&#10;          &lt;groupId&gt;jakarta.servlet&lt;/groupId&gt;&#10;          &lt;artifactId&gt;jakarta.servlet-api&lt;/artifactId&gt;&#10;          &lt;version&gt;6.1.0&lt;/version&gt;&#10;          &lt;scope&gt;provided&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;      &lt;dependency&gt;&#10;          &lt;groupId&gt;com.cloudinary&lt;/groupId&gt;&#10;          &lt;artifactId&gt;cloudinary-core&lt;/artifactId&gt;&#10;          &lt;version&gt;2.3.0&lt;/version&gt;&#10;      &lt;/dependency&gt;&#10;      &lt;dependency&gt;&#10;          &lt;groupId&gt;io.github.cdimascio&lt;/groupId&gt;&#10;          &lt;artifactId&gt;java-dotenv&lt;/artifactId&gt;&#10;          &lt;version&gt;5.2.2&lt;/version&gt;&#10;      &lt;/dependency&gt;&#10;      &lt;dependency&gt;&#10;          &lt;groupId&gt;com.cloudinary&lt;/groupId&gt;&#10;          &lt;artifactId&gt;cloudinary-http5&lt;/artifactId&gt;&#10;          &lt;version&gt;2.3.2&lt;/version&gt;&#10;      &lt;/dependency&gt;&#10;&#10;&#10;      &lt;dependency&gt;&#10;          &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;          &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&#10;          &lt;version&gt;8.0.33&lt;/version&gt;&#10;      &lt;/dependency&gt;&#10;      &lt;dependency&gt;&#10;      &lt;groupId&gt;jakarta.servlet.jsp.jstl&lt;/groupId&gt;&#10;      &lt;artifactId&gt;jakarta.servlet.jsp.jstl-api&lt;/artifactId&gt;&#10;      &lt;version&gt;3.0.0&lt;/version&gt;&#10;  &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;&#10;        &lt;artifactId&gt;jakarta.servlet.jsp.jstl&lt;/artifactId&gt;&#10;        &lt;version&gt;3.0.1&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;&#10;&#10;    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;      &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;&#10;      &lt;version&gt;${junit.version}&lt;/version&gt;&#10;      &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;      &lt;dependency&gt;&#10;        &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;        &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;&#10;        &lt;version&gt;${junit.version}&lt;/version&gt;&#10;        &lt;scope&gt;test&lt;/scope&gt;&#10;      &lt;/dependency&gt;&#10;      &lt;!-- JPA and Hibernate --&gt;&#10;      &lt;dependency&gt;&#10;          &lt;groupId&gt;org.hibernate&lt;/groupId&gt;&#10;          &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;&#10;          &lt;version&gt;6.3.1.Final&lt;/version&gt;&#10;      &lt;/dependency&gt;&#10;      &lt;dependency&gt;&#10;          &lt;groupId&gt;jakarta.persistence&lt;/groupId&gt;&#10;          &lt;artifactId&gt;jakarta.persistence-api&lt;/artifactId&gt;&#10;          &lt;version&gt;3.1.0&lt;/version&gt;&#10;      &lt;/dependency&gt;&#10;      &lt;!-- Spring Data JPA --&gt;&#10;      &lt;dependency&gt;&#10;          &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;&#10;          &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;&#10;          &lt;version&gt;3.1.4&lt;/version&gt;&#10;      &lt;/dependency&gt;&#10;  &lt;/dependencies&gt;&#10;&#10;  &lt;build&gt;&#10;    &lt;plugins&gt;&#10;&lt;plugin&gt;&#10;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;3.4.0&lt;/version&gt;&#10;      &lt;/plugin&gt;    &lt;/plugins&gt;&#10;  &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/controller/HomeController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/controller/HomeController.java" />
              <option name="originalContent" value="package org.example.demo.controller;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.Cookie;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.demo.dao.ProductDAO;&#10;import org.example.demo.models.Product;&#10;import org.example.demo.services.ProductService;&#10;&#10;import java.io.IOException;&#10;import java.util.List;&#10;&#10;@WebServlet(&quot;/home/*&quot;)&#10;public class HomeController extends HttpServlet {&#10;    private ProductService productService;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        productService = new ProductService(new ProductDAO());&#10;    }&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        response.setContentType(&quot;text/html&quot;);&#10;         List&lt;Product&gt; products = productService.getAllProducts();&#10;        String userName = (String) request.getSession().getAttribute(&quot;username&quot;);&#10;&#10;        request.setAttribute(&quot;product&quot;, products);&#10;        request.setAttribute(&quot;userName&quot;, userName);&#10;        request.getRequestDispatcher(&quot;/view/page/client/home.jsp&quot;).forward(request, response);&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.demo.controller;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.demo.models.Product;&#10;import org.example.demo.service.ProductService;&#10;&#10;import java.io.IOException;&#10;import java.util.List;&#10;&#10;@WebServlet(&quot;/home/*&quot;)&#10;public class HomeController extends HttpServlet {&#10;    private ProductService productService;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        productService = new ProductService();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        response.setContentType(&quot;text/html&quot;);&#10;        List&lt;Product&gt; products = productService.getAllProducts();&#10;        String userName = (String) request.getSession().getAttribute(&quot;username&quot;);&#10;&#10;        request.setAttribute(&quot;products&quot;, products);  // Sửa &quot;product&quot; thành &quot;products&quot; cho đúng với tên biến&#10;        request.setAttribute(&quot;userName&quot;, userName);&#10;        request.getRequestDispatcher(&quot;/view/page/client/home.jsp&quot;).forward(request, response);&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        if (productService != null) {&#10;            productService.close();&#10;        }&#10;        super.destroy();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/controller/Login.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/controller/Login.java" />
              <option name="originalContent" value="package org.example.demo.controller;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.*;&#10;import org.example.demo.entitys.UserModel;&#10;import org.example.demo.service.AuthenticationService;&#10;&#10;import java.io.IOException;&#10;import java.sql.SQLException;&#10;&#10;@WebServlet(&quot;/login&quot;)&#10;public class Login extends HttpServlet {&#10;    private AuthenticationService userService;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        userService = new AuthenticationService();&#10;    }&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        response.setContentType(&quot;text/html&quot;);&#10;        request.getRequestDispatcher(&quot;/view/loginCookie.jsp&quot;).forward(request, response);&#10;    }&#10;    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String userName = req.getParameter(&quot;username&quot;);&#10;        String password = req.getParameter(&quot;password&quot;);&#10;        UserModel user = null;&#10;        try {&#10;            user = userService.login()&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;        if (user != null) {&#10;            HttpSession session = req.getSession();&#10;            session.setAttribute(&quot;username&quot;, userName); //lưu trữ thông tin người dùng&#10;&#10;            session.setMaxInactiveInterval(30 * 60); //thời gian hết hạn của session là 30 phút&#10;            resp.sendRedirect(req.getContextPath() + &quot;/home&quot;);&#10;        }&#10;&#10;        else {&#10;            req.setAttribute(&quot;error&quot;, &quot;Invalid username or password&quot;);&#10;            req.getRequestDispatcher(&quot;/view/loginCookie.jsp&quot;).forward(req, resp);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.demo.controller;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.example.demo.service.AuthenticationService;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet(&quot;/login&quot;)&#10;public class Login extends HttpServlet {&#10;    private AuthenticationService authService;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        authService = new AuthenticationService();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        response.setContentType(&quot;text/html&quot;);&#10;        request.getRequestDispatcher(&quot;/view/loginSession.jsp&quot;).forward(request, response);&#10;    }&#10;&#10;    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String username = req.getParameter(&quot;username&quot;);&#10;        String password = req.getParameter(&quot;password&quot;);&#10;&#10;        HttpSession session = req.getSession();&#10;        if (authService.login(username, password, session)) {&#10;            String role = authService.getUserRole(username);&#10;            if (&quot;admin&quot;.equals(role)) {&#10;                resp.sendRedirect(req.getContextPath() + &quot;/admin/manage-product&quot;);&#10;            } else {&#10;                resp.sendRedirect(req.getContextPath() + &quot;/home&quot;);&#10;            }&#10;        } else {&#10;            req.setAttribute(&quot;error&quot;, &quot;Invalid username or password&quot;);&#10;            req.getRequestDispatcher(&quot;/view/loginSession.jsp&quot;).forward(req, resp);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        if (authService != null) {&#10;            authService.close();&#10;        }&#10;        super.destroy();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/controller/LoginBySession.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/controller/LoginBySession.java" />
              <option name="updatedContent" value="package org.example.demo.controller;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.*;&#10;import org.example.demo.service.AuthenticationService;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet(&quot;/loginSession&quot;)&#10;public class LoginBySession extends HttpServlet {&#10;    private AuthenticationService authService;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        authService = new AuthenticationService();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        response.setContentType(&quot;text/html&quot;);&#10;        request.getRequestDispatcher(&quot;/view/loginSession.jsp&quot;).forward(request, response);&#10;    }&#10;&#10;    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String username = req.getParameter(&quot;username&quot;);&#10;        String password = req.getParameter(&quot;password&quot;);&#10;&#10;        HttpSession session = req.getSession();&#10;        if (authService.login(username, password, session)) {&#10;            String role = authService.getUserRole(username);&#10;            if (&quot;admin&quot;.equals(role)) {&#10;                resp.sendRedirect(req.getContextPath() + &quot;/admin/manage-product&quot;);&#10;            } else {&#10;                resp.sendRedirect(req.getContextPath() + &quot;/home&quot;);&#10;            }&#10;        } else {&#10;            req.setAttribute(&quot;error&quot;, &quot;Invalid username or password&quot;);&#10;            req.getRequestDispatcher(&quot;/view/loginSession.jsp&quot;).forward(req, resp);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        if (authService != null) {&#10;            authService.close();&#10;        }&#10;        super.destroy();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/controller/Logout.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/controller/Logout.java" />
              <option name="originalContent" value="package org.example.demo.controller;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet(&quot;/logout&quot;)&#10;public class Logout extends HttpServlet {&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        HttpSession session = request.getSession(false);&#10;        if (session != null) {&#10;            session.invalidate();&#10;        }&#10;        response.sendRedirect(request.getContextPath() + &quot;/loginSession&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.demo.controller;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.demo.service.AuthenticationService;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet(&quot;/logout&quot;)&#10;public class Logout extends HttpServlet {&#10;    private AuthenticationService authService;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        authService = new AuthenticationService();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        authService.logout(request.getSession());&#10;        response.sendRedirect(request.getContextPath() + &quot;/loginSession&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        if (authService != null) {&#10;            authService.close();&#10;        }&#10;        super.destroy();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/controller/RegisterController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/controller/RegisterController.java" />
              <option name="originalContent" value="package org.example.demo.controller;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.demo.entitys.UserModel;&#10;import org.example.demo.service.UserService;&#10;&#10;import java.io.IOException;&#10;import java.util.UUID;&#10;&#10;@WebServlet(&quot;/register&quot;)&#10;public class RegisterController extends HttpServlet {&#10;    private UserService userService;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        userService = new UserService();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        request.getRequestDispatcher(&quot;/view/register.jsp&quot;).forward(request, response);&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        String username = request.getParameter(&quot;username&quot;);&#10;        String password = request.getParameter(&quot;password&quot;);&#10;        String email = request.getParameter(&quot;email&quot;);&#10;&#10;        // Kiểm tra username đã tồn tại chưa&#10;        UserModel existingUser = userService.findByUsername(username);&#10;        if (existingUser != null) {&#10;            request.setAttribute(&quot;error&quot;, &quot;Username already exists&quot;);&#10;            request.getRequestDispatcher(&quot;/view/register.jsp&quot;).forward(request, response);&#10;            return;&#10;        }&#10;&#10;        // Tạo user mới&#10;        UserModel newUser = new UserModel(&#10;            UUID.randomUUID().toString(),&#10;            username,&#10;            password,&#10;            email,&#10;            &quot;user&quot; // role mặc định là user&#10;        );&#10;&#10;        userService.registerUser(newUser);&#10;        response.sendRedirect(request.getContextPath() + &quot;/loginSession&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        if (userService != null) {&#10;            userService.close();&#10;        }&#10;        super.destroy();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.demo.controller;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.demo.service.AuthenticationService;&#10;import org.example.demo.service.AuthenticationService.RegisterResult;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet(&quot;/register&quot;)&#10;public class RegisterController extends HttpServlet {&#10;    private AuthenticationService authService;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        authService = new AuthenticationService();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        request.getRequestDispatcher(&quot;/view/register.jsp&quot;).forward(request, response);&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        String username = request.getParameter(&quot;username&quot;);&#10;        String password = request.getParameter(&quot;password&quot;);&#10;        String email = request.getParameter(&quot;email&quot;);&#10;&#10;        RegisterResult result = authService.register(username, password, email);&#10;        &#10;        if (result.isSuccess()) {&#10;            response.sendRedirect(request.getContextPath() + &quot;/loginSession&quot;);&#10;        } else {&#10;            request.setAttribute(&quot;error&quot;, result.getMessage());&#10;            request.getRequestDispatcher(&quot;/view/register.jsp&quot;).forward(request, response);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        if (authService != null) {&#10;            authService.close();&#10;        }&#10;        super.destroy();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/controller/admin/product/AddProductController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/controller/admin/product/AddProductController.java" />
              <option name="updatedContent" value="package org.example.demo.controller.admin.product;&#10;&#10;import com.cloudinary.Cloudinary;&#10;import com.cloudinary.utils.ObjectUtils;&#10;import io.github.cdimascio.dotenv.Dotenv;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.MultipartConfig;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.Part;&#10;import org.example.demo.models.Product;&#10;import org.example.demo.service.ProductService;&#10;&#10;import java.io.IOException;&#10;import java.util.Map;&#10;import java.util.UUID;&#10;&#10;@WebServlet(&quot;/admin/manage-product/add&quot;)&#10;@MultipartConfig&#10;public class AddProductController extends HttpServlet {&#10;    private ProductService productService;&#10;    private Cloudinary cloudinary;&#10;&#10;    public void init() {&#10;        Dotenv dotenv = Dotenv.configure().load();&#10;        cloudinary = new Cloudinary(ObjectUtils.asMap(&#10;                &quot;cloud_name&quot;, dotenv.get(&quot;CLOUDINARY_CLOUD_NAME&quot;),&#10;                &quot;api_key&quot;, dotenv.get(&quot;CLOUDINARY_API_KEY&quot;),&#10;                &quot;api_secret&quot;, dotenv.get(&quot;CLOUDINARY_API_SECRET&quot;),&#10;                &quot;secure&quot;, true&#10;        ));&#10;        productService = new ProductService();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        request.getRequestDispatcher(&quot;/view/page/admin/product/addProduct.jsp&quot;).forward(request, response);&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        request.setCharacterEncoding(&quot;UTF-8&quot;);&#10;&#10;        try {&#10;            String name = request.getParameter(&quot;name&quot;);&#10;            double price = Double.parseDouble(request.getParameter(&quot;price&quot;));&#10;            int stock = Integer.parseInt(request.getParameter(&quot;stock&quot;));&#10;            String size = request.getParameter(&quot;size&quot;);&#10;            String description = request.getParameter(&quot;description&quot;);&#10;            boolean isBestSeller = request.getParameter(&quot;best_seller&quot;) != null;&#10;&#10;            Part filePart = request.getPart(&quot;productImage&quot;);&#10;            String imageUrl = null;&#10;&#10;            if (filePart != null &amp;&amp; filePart.getSize() &gt; 0) {&#10;                byte[] fileBytes = filePart.getInputStream().readAllBytes();&#10;                Map uploadOptions = ObjectUtils.asMap(&quot;folder&quot;, &quot;milkteashop&quot;);&#10;                Map uploadResult = cloudinary.uploader().upload(fileBytes, uploadOptions);&#10;                imageUrl = (String) uploadResult.get(&quot;secure_url&quot;);&#10;            }&#10;&#10;            Product newProduct = new Product(&#10;                UUID.randomUUID().toString(),&#10;                name, &#10;                price, &#10;                size, &#10;                description, &#10;                imageUrl, &#10;                isBestSeller, &#10;                stock&#10;            );&#10;&#10;            productService.addProduct(newProduct);&#10;            response.sendRedirect(request.getContextPath() + &quot;/admin/manage-product&quot;);&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            response.sendRedirect(request.getContextPath() + &quot;/admin/manage-product&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        if (productService != null) {&#10;            productService.close();&#10;        }&#10;        super.destroy();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/controller/admin/product/AdminManageProduct.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/controller/admin/product/AdminManageProduct.java" />
              <option name="originalContent" value="package org.example.demo.controller.admin.product;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.demo.dao.ProductDAO;&#10;import org.example.demo.models.Product;&#10;import org.example.demo.services.ProductService;&#10;&#10;import java.io.IOException;&#10;import java.util.List;&#10;&#10;@WebServlet(&quot;/admin/manage-product&quot;)&#10;public class AdminManageProduct extends HttpServlet {&#10;    private ProductService productService;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        productService = new ProductService(new ProductDAO());&#10;    }&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        resp.setContentType(&quot;text/html&quot;);&#10;        List&lt;Product&gt; products = productService.getAllProducts();&#10;        req.setAttribute(&quot;products&quot;, products);&#10;&#10;        req.getRequestDispatcher(&quot;/view/page/admin/product/manageProduct.jsp&quot;).forward(req, resp);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package org.example.demo.controller.admin.product;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.demo.models.Product;&#10;import org.example.demo.service.ProductService;&#10;&#10;import java.io.IOException;&#10;import java.util.List;&#10;&#10;@WebServlet(&quot;/admin/manage-product&quot;)&#10;public class AdminManageProduct extends HttpServlet {&#10;    private ProductService productService;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        productService = new ProductService();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        resp.setContentType(&quot;text/html&quot;);&#10;        List&lt;Product&gt; products = productService.getAllProducts();&#10;        req.setAttribute(&quot;products&quot;, products);&#10;&#10;        req.getRequestDispatcher(&quot;/view/page/admin/product/manageProduct.jsp&quot;).forward(req, resp);&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        if (productService != null) {&#10;            productService.close();&#10;        }&#10;        super.destroy();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/controller/admin/product/DeleteProductController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/controller/admin/product/DeleteProductController.java" />
              <option name="updatedContent" value="package org.example.demo.controller.admin.product;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.demo.service.ProductService;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet(&quot;/admin/manage-product/delete/*&quot;)&#10;public class DeleteProductController extends HttpServlet {&#10;    private ProductService productService;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        productService = new ProductService();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        try {&#10;            String id = request.getPathInfo().substring(1);&#10;            productService.deleteProduct(id);&#10;            response.sendRedirect(request.getContextPath() + &quot;/admin/manage-product&quot;);&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            response.sendRedirect(request.getContextPath() + &quot;/admin/manage-product&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        if (productService != null) {&#10;            productService.close();&#10;        }&#10;        super.destroy();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/controller/admin/product/UpdateProductController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/controller/admin/product/UpdateProductController.java" />
              <option name="originalContent" value="package org.example.demo.controller.admin.product;&#10;&#10;import com.cloudinary.Cloudinary;&#10;import com.cloudinary.utils.ObjectUtils;&#10;import io.github.cdimascio.dotenv.Dotenv;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.MultipartConfig;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.Part;&#10;import org.example.demo.dao.ProductDAO;&#10;import org.example.demo.models.Product;&#10;import org.example.demo.services.ProductService;&#10;&#10;import java.io.IOException;&#10;import java.util.Map;&#10;&#10;@WebServlet(&quot;/admin/manage-product/update/*&quot;)&#10;@MultipartConfig&#10;public class UpdateProductController extends HttpServlet {&#10;    private ProductService productService;&#10;    private Cloudinary cloudinary;&#10;    public void init() {&#10;        Dotenv dotenv = Dotenv.configure().load();&#10;        cloudinary = new Cloudinary(ObjectUtils.asMap(&#10;                &quot;cloud_name&quot;, dotenv.get(&quot;CLOUDINARY_CLOUD_NAME&quot;),&#10;                &quot;api_key&quot;, dotenv.get(&quot;CLOUDINARY_API_KEY&quot;),&#10;                &quot;api_secret&quot;, dotenv.get(&quot;CLOUDINARY_API_SECRET&quot;),&#10;                &quot;secure&quot;, true&#10;&#10;        ));&#10;        productService = new ProductService(new ProductDAO());&#10;    }&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String id = req.getPathInfo().substring(1);&#10;        Product product = productService.getProductById(id);&#10;        System.out.println(product);&#10;&#10;        resp.setContentType(&quot;text/html&quot;);&#10;        req.setAttribute(&quot;product&quot;, product);&#10;        req.getRequestDispatcher(&quot;/view/page/admin/product/updateProduct.jsp&quot;).forward(req, resp);&#10;    }&#10;    @Override&#10;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        // Đảm bảo request được xử lý với encoding UTF-8&#10;        request.setCharacterEncoding(&quot;UTF-8&quot;);&#10;&#10;        try {&#10;            // 4. Lấy các thông tin từ form (text fields)&#10;            String name = request.getParameter(&quot;name&quot;);&#10;            double price = Double.parseDouble(request.getParameter(&quot;price&quot;));&#10;            int stock = Integer.parseInt(request.getParameter(&quot;stock&quot;));&#10;            String size = request.getParameter(&quot;size&quot;);&#10;            String description = request.getParameter(&quot;description&quot;);&#10;            String id = request.getParameter(&quot;id&quot;);&#10;            // Dùng getParameter trả về &quot;on&quot; nếu được check, null nếu không.&#10;            boolean isBestSeller = request.getParameter(&quot;best_seller&quot;) != null;&#10;&#10;            // 5. Lấy file ảnh từ request&#10;            Part filePart = request.getPart(&quot;productImage&quot;); // &quot;productImage&quot; là name của input type=&quot;file&quot;&#10;&#10;            String imageUrl = null;&#10;            if (filePart != null &amp;&amp; filePart.getSize() &gt; 0) {&#10;                // 6. Upload file lên Cloudinary&#10;                // Chuyển file Part thành byte array để upload&#10;                byte[] fileBytes = filePart.getInputStream().readAllBytes();&#10;                // Tùy chọn upload (nếu cần)&#10;                Map uploadOptions = ObjectUtils.asMap(&quot;folder&quot;, &quot;milkteashop&quot;);&#10;                // Gọi API để upload và nhận kết quả trả về&#10;                Map uploadResult = cloudinary.uploader().upload(fileBytes, uploadOptions);&#10;&#10;                // 7. Lấy URL an toàn (https) của ảnh sau khi upload thành công&#10;                imageUrl = (String) uploadResult.get(&quot;secure_url&quot;);&#10;            } else {&#10;                // Xử lý trường hợp người dùng không upload ảnh (nếu cho phép)&#10;                // Ví dụ: gán một ảnh mặc định&#10;                imageUrl = request.getParameter(&quot;image_url_old&quot;);;&#10;            }&#10;&#10;            Product newProduct = new Product(id,name, price, size, description, imageUrl, isBestSeller,stock );&#10;&#10;&#10;            productService.updateProduct(newProduct);&#10;&#10;            System.out.println(&quot;Thêm sản phẩm thành công!&quot;);&#10;            System.out.println(&quot;Tên: &quot; + name);&#10;            System.out.println(&quot;URL ảnh: &quot; + imageUrl);&#10;&#10;            // 9. Chuyển hướng người dùng về trang danh sách sản phẩm&#10;            response.sendRedirect(&quot;/admin/manage-product&quot;);&#10;&#10;        } catch (Exception e) {&#10;            // Xử lý lỗi (ví dụ: log lỗi, hiển thị trang lỗi)&#10;            e.printStackTrace();&#10;//            request.setAttribute(&quot;errorMessage&quot;, &quot;Đã xảy ra lỗi trong quá trình thêm sản phẩm.&quot;);&#10;//            request.getRequestDispatcher(&quot;/views/admin/error.jsp&quot;).forward(request, response);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.demo.controller.admin.product;&#10;&#10;import com.cloudinary.Cloudinary;&#10;import com.cloudinary.utils.ObjectUtils;&#10;import io.github.cdimascio.dotenv.Dotenv;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.MultipartConfig;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.Part;&#10;import org.example.demo.models.Product;&#10;import org.example.demo.service.ProductService;&#10;&#10;import java.io.IOException;&#10;import java.util.Map;&#10;&#10;@WebServlet(&quot;/admin/manage-product/update/*&quot;)&#10;@MultipartConfig&#10;public class UpdateProductController extends HttpServlet {&#10;    private ProductService productService;&#10;    private Cloudinary cloudinary;&#10;&#10;    public void init() {&#10;        Dotenv dotenv = Dotenv.configure().load();&#10;        cloudinary = new Cloudinary(ObjectUtils.asMap(&#10;                &quot;cloud_name&quot;, dotenv.get(&quot;CLOUDINARY_CLOUD_NAME&quot;),&#10;                &quot;api_key&quot;, dotenv.get(&quot;CLOUDINARY_API_KEY&quot;),&#10;                &quot;api_secret&quot;, dotenv.get(&quot;CLOUDINARY_API_SECRET&quot;),&#10;                &quot;secure&quot;, true&#10;        ));&#10;        productService = new ProductService();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String id = req.getPathInfo().substring(1);&#10;        Product product = productService.getProductById(id);&#10;&#10;        resp.setContentType(&quot;text/html&quot;);&#10;        req.setAttribute(&quot;product&quot;, product);&#10;        req.getRequestDispatcher(&quot;/view/page/admin/product/updateProduct.jsp&quot;).forward(req, resp);&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        request.setCharacterEncoding(&quot;UTF-8&quot;);&#10;&#10;        try {&#10;            String id = request.getParameter(&quot;id&quot;);&#10;            String name = request.getParameter(&quot;name&quot;);&#10;            double price = Double.parseDouble(request.getParameter(&quot;price&quot;));&#10;            int stock = Integer.parseInt(request.getParameter(&quot;stock&quot;));&#10;            String size = request.getParameter(&quot;size&quot;);&#10;            String description = request.getParameter(&quot;description&quot;);&#10;            boolean isBestSeller = request.getParameter(&quot;best_seller&quot;) != null;&#10;&#10;            Part filePart = request.getPart(&quot;productImage&quot;);&#10;            String imageUrl;&#10;&#10;            if (filePart != null &amp;&amp; filePart.getSize() &gt; 0) {&#10;                byte[] fileBytes = filePart.getInputStream().readAllBytes();&#10;                Map uploadOptions = ObjectUtils.asMap(&quot;folder&quot;, &quot;milkteashop&quot;);&#10;                Map uploadResult = cloudinary.uploader().upload(fileBytes, uploadOptions);&#10;                imageUrl = (String) uploadResult.get(&quot;secure_url&quot;);&#10;            } else {&#10;                imageUrl = request.getParameter(&quot;image_url_old&quot;);&#10;            }&#10;&#10;            Product updatedProduct = new Product(id, name, price, size, description, imageUrl, isBestSeller, stock);&#10;            productService.updateProduct(updatedProduct);&#10;&#10;            response.sendRedirect(request.getContextPath() + &quot;/admin/manage-product&quot;);&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            response.sendRedirect(request.getContextPath() + &quot;/admin/manage-product&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        if (productService != null) {&#10;            productService.close();&#10;        }&#10;        super.destroy();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/dao/Product.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/dao/Product.java" />
              <option name="originalContent" value="package org.example.demo.dao;&#10;&#10;public class Product {&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.demo.dao;&#10;&#10;import org.example.demo.config.DBUtil;&#10;import org.example.demo.models.Product;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class Product {&#10;    public List&lt;Product&gt; findAllProduct() {&#10;        List&lt;Product&gt; products = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id, name, price, size, description, image_url FROM product&quot;;&#10;        try (Connection conn = DBUtil.getConnection();&#10;             Statement stmt = conn.createStatement();&#10;             ResultSet rs = stmt.executeQuery(sql)) {&#10;            while (rs.next()) {&#10;                Product product = new Product(&#10;                    rs.getString(&quot;id&quot;),&#10;                    rs.getString(&quot;name&quot;),&#10;                    rs.getDouble(&quot;price&quot;),&#10;                    rs.getString(&quot;size&quot;),&#10;                    rs.getString(&quot;description&quot;),&#10;                    rs.getString(&quot;image_url&quot;)&#10;                );&#10;                products.add(product);&#10;            }&#10;        } catch (SQLException e) {&#10;            e.printStackTrace();&#10;        }&#10;        return products;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/models/Product.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/models/Product.java" />
              <option name="originalContent" value="package org.example.demo.models;&#10;&#10;import java.util.UUID;&#10;&#10;public class Product {&#10;    private String id;&#10;    private String name;&#10;    private String size;&#10;    private String description;&#10;    private String image_url;&#10;    private double price;&#10;    private Boolean best_seller;&#10;    private int stock;&#10;&#10;    public int getStock() {&#10;        return stock;&#10;    }&#10;&#10;    public void setStock(int stock) {&#10;        this.stock = stock;&#10;    }&#10;&#10;    public Boolean getBest_seller() {&#10;        return best_seller;&#10;    }&#10;&#10;    public void setBest_seller(Boolean best_seller) {&#10;        this.best_seller = best_seller;&#10;    }&#10;&#10;    public Product( String id,String name, double price, String size, String description, String image_url, Boolean best_seller, int stock) {&#10;&#10;        this.id = id;&#10;        this.name = name;&#10;        this.price = price;&#10;        this.size = size;&#10;        this.description = description;&#10;        this.image_url = image_url;&#10;        this.best_seller = best_seller;&#10;        this.stock = stock;&#10;    }&#10;    public Product( String name, double price, String size, String description, String image_url, Boolean best_seller, int stock) {&#10;&#10;        this.id = UUID.randomUUID().toString();&#10;        this.name = name;&#10;        this.price = price;&#10;        this.size = size;&#10;        this.description = description;&#10;        this.image_url = image_url;&#10;        this.best_seller = best_seller;&#10;        this.stock = stock;&#10;    }&#10;&#10;    public String getSize() {&#10;        return size;&#10;    }&#10;&#10;    public void setSize(String size) {&#10;        this.size = size;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public String getImage_url() {&#10;        return image_url;&#10;    }&#10;&#10;    public void setImage_url(String image_url) {&#10;        this.image_url = image_url;&#10;    }&#10;&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public double getPrice() {&#10;        return price;&#10;    }&#10;&#10;    public void setPrice(double price) {&#10;        this.price = price;&#10;    }&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Product{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, name='&quot; + name + '\'' +&#10;                &quot;, price=&quot; + price +&#10;                &quot;, size='&quot; + size + '\'' +&#10;                &quot;, description='&quot; + description + '\'' +&#10;                &quot;, image_url='&quot; + image_url + '\'' +&#10;                &quot;, best_seller=&quot; + best_seller +&#10;                &quot;, stock=&quot; + stock +&#10;&#10;                '}';&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.demo.models;&#10;&#10;import jakarta.persistence.*;&#10;import java.util.UUID;&#10;&#10;@Entity&#10;@Table(name = &quot;products&quot;)&#10;public class Product {&#10;    @Id&#10;    private String id;&#10;    &#10;    @Column(nullable = false)&#10;    private String name;&#10;    &#10;    @Column&#10;    private String size;&#10;    &#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String description;&#10;    &#10;    @Column(name = &quot;image_url&quot;)&#10;    private String image_url;&#10;    &#10;    @Column(nullable = false)&#10;    private double price;&#10;    &#10;    @Column(name = &quot;best_seller&quot;)&#10;    private Boolean best_seller;&#10;    &#10;    @Column&#10;    private int stock;&#10;&#10;    public int getStock() {&#10;        return stock;&#10;    }&#10;&#10;    public void setStock(int stock) {&#10;        this.stock = stock;&#10;    }&#10;&#10;    public Boolean getBest_seller() {&#10;        return best_seller;&#10;    }&#10;&#10;    public void setBest_seller(Boolean best_seller) {&#10;        this.best_seller = best_seller;&#10;    }&#10;&#10;    public Product( String id,String name, double price, String size, String description, String image_url, Boolean best_seller, int stock) {&#10;&#10;        this.id = id;&#10;        this.name = name;&#10;        this.price = price;&#10;        this.size = size;&#10;        this.description = description;&#10;        this.image_url = image_url;&#10;        this.best_seller = best_seller;&#10;        this.stock = stock;&#10;    }&#10;    public Product( String name, double price, String size, String description, String image_url, Boolean best_seller, int stock) {&#10;&#10;        this.id = UUID.randomUUID().toString();&#10;        this.name = name;&#10;        this.price = price;&#10;        this.size = size;&#10;        this.description = description;&#10;        this.image_url = image_url;&#10;        this.best_seller = best_seller;&#10;        this.stock = stock;&#10;    }&#10;&#10;    public String getSize() {&#10;        return size;&#10;    }&#10;&#10;    public void setSize(String size) {&#10;        this.size = size;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public String getImage_url() {&#10;        return image_url;&#10;    }&#10;&#10;    public void setImage_url(String image_url) {&#10;        this.image_url = image_url;&#10;    }&#10;&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public double getPrice() {&#10;        return price;&#10;    }&#10;&#10;    public void setPrice(double price) {&#10;        this.price = price;&#10;    }&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Product{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, name='&quot; + name + '\'' +&#10;                &quot;, price=&quot; + price +&#10;                &quot;, size='&quot; + size + '\'' +&#10;                &quot;, description='&quot; + description + '\'' +&#10;                &quot;, image_url='&quot; + image_url + '\'' +&#10;                &quot;, best_seller=&quot; + best_seller +&#10;                &quot;, stock=&quot; + stock +&#10;&#10;                '}';&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/models/UserModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/models/UserModel.java" />
              <option name="originalContent" value="package org.example.demo.models;&#10;&#10;public class UserModel {&#10;    private String id;&#10;    private String username;&#10;    private String password;&#10;    private String email;&#10;    private String role;&#10;&#10;    public UserModel(String id, String username, String password, String email, String role) {&#10;        this.id = id;&#10;        this.username = username;&#10;        this.password = password;&#10;        this.email = email;&#10;        this.role = role;&#10;    }&#10;&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getRole() {&#10;        return role;&#10;    }&#10;&#10;    public void setRole(String role) {&#10;        this.role = role;&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.demo.models;&#10;&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;public class UserModel {&#10;    @Id&#10;    private String id;&#10;    &#10;    @Column(nullable = false, unique = true)&#10;    private String username;&#10;    &#10;    @Column(nullable = false)&#10;    private String password;&#10;    &#10;    @Column(nullable = false, unique = true)&#10;    private String email;&#10;    &#10;    @Column(nullable = false)&#10;    private String role;&#10;&#10;    public UserModel(String id, String username, String password, String email, String role) {&#10;        this.id = id;&#10;        this.username = username;&#10;        this.password = password;&#10;        this.email = email;&#10;        this.role = role;&#10;    }&#10;&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getRole() {&#10;        return role;&#10;    }&#10;&#10;    public void setRole(String role) {&#10;        this.role = role;&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/repository/ProductRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/repository/ProductRepository.java" />
              <option name="originalContent" value="package org.example.demo.repository;&#10;&#10;import jakarta.persistence.EntityManager;&#10;import jakarta.persistence.EntityManagerFactory;&#10;import jakarta.persistence.Persistence;&#10;import org.example.demo.entitys.Product;&#10;import java.util.List;&#10;&#10;public class ProductRepository {&#10;    private final EntityManagerFactory emf;&#10;    private final EntityManager em;&#10;&#10;    public ProductRepository() {&#10;        emf = Persistence.createEntityManagerFactory(&quot;default&quot;);&#10;        em = emf.createEntityManager();&#10;    }&#10;&#10;    public void save(Product product) {&#10;        try {&#10;            em.getTransaction().begin();&#10;            em.persist(product);&#10;            em.getTransaction().commit();&#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    public Product findById(String id) {&#10;        return em.find(Product.class, id);&#10;    }&#10;&#10;    public List&lt;Product&gt; findAll() {&#10;        return em.createQuery(&quot;SELECT p FROM Product p&quot;, Product.class).getResultList();&#10;    }&#10;&#10;    public void update(Product product) {&#10;        try {&#10;            em.getTransaction().begin();&#10;            em.merge(product);&#10;            em.getTransaction().commit();&#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    public void delete(String id) {&#10;        try {&#10;            em.getTransaction().begin();&#10;            Product product = em.find(Product.class, id);&#10;            if (product != null) {&#10;                em.remove(product);&#10;            }&#10;            em.getTransaction().commit();&#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    public void close() {&#10;        em.close();&#10;        emf.close();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.demo.repository;&#10;&#10;import jakarta.persistence.EntityManager;&#10;import jakarta.persistence.EntityManagerFactory;&#10;import jakarta.persistence.Persistence;&#10;import org.example.demo.models.Product;&#10;import java.util.List;&#10;&#10;public class ProductRepository {&#10;    private final EntityManagerFactory emf;&#10;    private EntityManager em;&#10;&#10;    public ProductRepository() {&#10;        emf = Persistence.createEntityManagerFactory(&quot;default&quot;);&#10;        em = emf.createEntityManager();&#10;    }&#10;&#10;    private void refreshEntityManager() {&#10;        if (em != null) {&#10;            em.close();&#10;        }&#10;        em = emf.createEntityManager();&#10;    }&#10;&#10;    public void save(Product product) {&#10;        try {&#10;            em.getTransaction().begin();&#10;            em.persist(product);&#10;            em.getTransaction().commit();&#10;            em.clear(); // Clear persistence context after commit&#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    public Product findById(String id) {&#10;        refreshEntityManager(); // Refresh to get latest data&#10;        return em.find(Product.class, id);&#10;    }&#10;&#10;    public List&lt;Product&gt; findAll() {&#10;        refreshEntityManager(); // Refresh to get latest data&#10;        return em.createQuery(&quot;SELECT p FROM Product p&quot;, Product.class)&#10;                 .setHint(&quot;jakarta.persistence.cache.storeMode&quot;, &quot;REFRESH&quot;)&#10;                 .getResultList();&#10;    }&#10;&#10;    public void update(Product product) {&#10;        try {&#10;            em.getTransaction().begin();&#10;            em.merge(product);&#10;            em.getTransaction().commit();&#10;            em.clear(); // Clear persistence context after commit&#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    public void delete(String id) {&#10;        try {&#10;            em.getTransaction().begin();&#10;            Product product = em.find(Product.class, id);&#10;            if (product != null) {&#10;                em.remove(product);&#10;            }&#10;            em.getTransaction().commit();&#10;            em.clear(); // Clear persistence context after commit&#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    public void close() {&#10;        if (em != null) {&#10;            em.close();&#10;        }&#10;        if (emf != null) {&#10;            emf.close();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/repository/UserRepository.java" />
              <option name="updatedContent" value="package org.example.demo.repository;&#10;&#10;import jakarta.persistence.EntityManager;&#10;import jakarta.persistence.EntityManagerFactory;&#10;import jakarta.persistence.Persistence;&#10;import org.example.demo.models.UserModel;&#10;import java.util.List;&#10;&#10;public class UserRepository {&#10;    private final EntityManagerFactory emf;&#10;    private final EntityManager em;&#10;&#10;    public UserRepository() {&#10;        emf = Persistence.createEntityManagerFactory(&quot;default&quot;);&#10;        em = emf.createEntityManager();&#10;    }&#10;&#10;    public void save(UserModel user) {&#10;        try {&#10;            em.getTransaction().begin();&#10;            em.persist(user);&#10;            em.getTransaction().commit();&#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    public UserModel findById(String id) {&#10;        return em.find(UserModel.class, id);&#10;    }&#10;&#10;    public UserModel findByUsername(String username) {&#10;        try {&#10;            return em.createQuery(&quot;SELECT u FROM UserModel u WHERE u.username = :username&quot;, UserModel.class)&#10;                    .setParameter(&quot;username&quot;, username)&#10;                    .getSingleResult();&#10;        } catch (Exception e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    public List&lt;UserModel&gt; findAll() {&#10;        return em.createQuery(&quot;SELECT u FROM UserModel u&quot;, UserModel.class).getResultList();&#10;    }&#10;&#10;    public void update(UserModel user) {&#10;        try {&#10;            em.getTransaction().begin();&#10;            em.merge(user);&#10;            em.getTransaction().commit();&#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    public void delete(String id) {&#10;        try {&#10;            em.getTransaction().begin();&#10;            UserModel user = em.find(UserModel.class, id);&#10;            if (user != null) {&#10;                em.remove(user);&#10;            }&#10;            em.getTransaction().commit();&#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    public void close() {&#10;        em.close();&#10;        emf.close();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/service/AuthenticationService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/service/AuthenticationService.java" />
              <option name="updatedContent" value="package org.example.demo.service;&#10;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.example.demo.models.UserModel;&#10;import org.example.demo.repository.UserRepository;&#10;&#10;import java.util.UUID;&#10;&#10;public class AuthenticationService {&#10;    private final UserRepository userRepository;&#10;&#10;    public AuthenticationService() {&#10;        this.userRepository = new UserRepository();&#10;    }&#10;&#10;    public boolean login(String username, String password, HttpSession session) {&#10;        UserModel user = userRepository.findByUsername(username);&#10;        &#10;        if (user != null &amp;&amp; user.getPassword().equals(password)) {&#10;            // Lưu thông tin user vào session&#10;            session.setAttribute(&quot;user&quot;, user);&#10;            session.setAttribute(&quot;username&quot;, user.getUsername());&#10;            session.setMaxInactiveInterval(30 * 60); // 30 phút&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public String getUserRole(String username) {&#10;        UserModel user = userRepository.findByUsername(username);&#10;        return user != null ? user.getRole() : null;&#10;    }&#10;&#10;    public void logout(HttpSession session) {&#10;        if (session != null) {&#10;            session.invalidate();&#10;        }&#10;    }&#10;&#10;    public RegisterResult register(String username, String password, String email) {&#10;        // Kiểm tra username đã tồn tại chưa&#10;        UserModel existingUser = userRepository.findByUsername(username);&#10;        if (existingUser != null) {&#10;            return new RegisterResult(false, &quot;Username already exists&quot;);&#10;        }&#10;&#10;        // Tạo user mới&#10;        UserModel newUser = new UserModel(&#10;            UUID.randomUUID().toString(),&#10;            username,&#10;            password,&#10;            email,&#10;            &quot;user&quot; // role mặc định là user&#10;        );&#10;&#10;        try {&#10;            userRepository.save(newUser);&#10;            return new RegisterResult(true, &quot;Registration successful&quot;);&#10;        } catch (Exception e) {&#10;            return new RegisterResult(false, &quot;Registration failed: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void close() {&#10;        if (userRepository != null) {&#10;            userRepository.close();&#10;        }&#10;    }&#10;&#10;    // Inner class để đóng gói kết quả đăng ký&#10;    public static class RegisterResult {&#10;        private final boolean success;&#10;        private final String message;&#10;&#10;        public RegisterResult(boolean success, String message) {&#10;            this.success = success;&#10;            this.message = message;&#10;        }&#10;&#10;        public boolean isSuccess() {&#10;            return success;&#10;        }&#10;&#10;        public String getMessage() {&#10;            return message;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/service/ProductService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/service/ProductService.java" />
              <option name="originalContent" value="package org.example.demo.service;&#10;&#10;import org.example.demo.entitys.Product;&#10;import org.example.demo.repository.ProductRepository;&#10;import java.util.List;&#10;&#10;public class ProductService {&#10;    private final ProductRepository productRepository;&#10;&#10;    public ProductService() {&#10;        this.productRepository = new ProductRepository();&#10;    }&#10;&#10;    public void addProduct(Product product) {&#10;        productRepository.save(product);&#10;    }&#10;&#10;    public void updateProduct(Product product) {&#10;        productRepository.update(product);&#10;    }&#10;&#10;    public void deleteProduct(String id) {&#10;        productRepository.delete(id);&#10;    }&#10;&#10;    public Product getProductById(String id) {&#10;        return productRepository.findById(id);&#10;    }&#10;&#10;    public List&lt;Product&gt; getAllProducts() {&#10;        return productRepository.findAll();&#10;    }&#10;&#10;    public void close() {&#10;        productRepository.close();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.demo.service;&#10;&#10;import org.example.demo.models.Product;&#10;import org.example.demo.repository.ProductRepository;&#10;import java.util.List;&#10;&#10;public class ProductService {&#10;    private final ProductRepository productRepository;&#10;&#10;    public ProductService() {&#10;        this.productRepository = new ProductRepository();&#10;    }&#10;&#10;    public void addProduct(Product product) {&#10;        productRepository.save(product);&#10;    }&#10;&#10;    public void updateProduct(Product product) {&#10;        productRepository.update(product);&#10;    }&#10;&#10;    public void deleteProduct(String id) {&#10;        productRepository.delete(id);&#10;    }&#10;&#10;    public Product getProductById(String id) {&#10;        return productRepository.findById(id);&#10;    }&#10;&#10;    public List&lt;Product&gt; getAllProducts() {&#10;        return productRepository.findAll();&#10;    }&#10;&#10;    public void close() {&#10;        productRepository.close();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/service/UserService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/service/UserService.java" />
              <option name="updatedContent" value="package org.example.demo.service;&#10;&#10;import org.example.demo.models.UserModel;&#10;import org.example.demo.repository.UserRepository;&#10;import java.util.List;&#10;&#10;public class UserService {&#10;    private final UserRepository userRepository;&#10;&#10;    public UserService() {&#10;        this.userRepository = new UserRepository();&#10;    }&#10;&#10;    public void registerUser(UserModel user) {&#10;        userRepository.save(user);&#10;    }&#10;&#10;    public UserModel findByUsername(String username) {&#10;        return userRepository.findByUsername(username);&#10;    }&#10;&#10;    public UserModel findById(String id) {&#10;        return userRepository.findById(id);&#10;    }&#10;&#10;    public List&lt;UserModel&gt; getAllUsers() {&#10;        return userRepository.findAll();&#10;    }&#10;&#10;    public void updateUser(UserModel user) {&#10;        userRepository.update(user);&#10;    }&#10;&#10;    public void deleteUser(String id) {&#10;        userRepository.delete(id);&#10;    }&#10;&#10;    public void close() {&#10;        userRepository.close();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/servlet/ProductServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/servlet/ProductServlet.java" />
              <option name="updatedContent" value="package org.example.demo.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.example.demo.models.Product;&#10;import org.example.demo.service.ProductService;&#10;&#10;import java.io.IOException;&#10;import java.util.List;&#10;&#10;@WebServlet(name = &quot;ProductServlet&quot;, urlPatterns = {&quot;/admin/products/*&quot;})&#10;public class ProductServlet extends HttpServlet {&#10;    private ProductService productService;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        super.init();&#10;        productService = new ProductService();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) &#10;            throws ServletException, IOException {&#10;        String action = request.getPathInfo();&#10;        if (action == null) {&#10;            action = &quot;/&quot;;&#10;        }&#10;&#10;        switch (action) {&#10;            case &quot;/list&quot;:&#10;                listProducts(request, response);&#10;                break;&#10;            case &quot;/add&quot;:&#10;                request.getRequestDispatcher(&quot;/view/page/admin/product-form.jsp&quot;).forward(request, response);&#10;                break;&#10;            case &quot;/edit&quot;:&#10;                showEditForm(request, response);&#10;                break;&#10;            default:&#10;                listProducts(request, response);&#10;                break;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest request, HttpServletResponse response) &#10;            throws ServletException, IOException {&#10;        String action = request.getPathInfo();&#10;        if (action == null) {&#10;            action = &quot;/&quot;;&#10;        }&#10;&#10;        switch (action) {&#10;            case &quot;/add&quot;:&#10;                addProduct(request, response);&#10;                break;&#10;            case &quot;/edit&quot;:&#10;                updateProduct(request, response);&#10;                break;&#10;            case &quot;/delete&quot;:&#10;                deleteProduct(request, response);&#10;                break;&#10;            default:&#10;                response.sendRedirect(request.getContextPath() + &quot;/admin/products/list&quot;);&#10;                break;&#10;        }&#10;    }&#10;&#10;    private void listProducts(HttpServletRequest request, HttpServletResponse response) &#10;            throws ServletException, IOException {&#10;        List&lt;Product&gt; products = productService.getAllProducts();&#10;        request.setAttribute(&quot;products&quot;, products);&#10;        request.getRequestDispatcher(&quot;/view/page/admin/products.jsp&quot;).forward(request, response);&#10;    }&#10;&#10;    private void showEditForm(HttpServletRequest request, HttpServletResponse response) &#10;            throws ServletException, IOException {&#10;        String id = request.getParameter(&quot;id&quot;);&#10;        Product product = productService.getProductById(id);&#10;        request.setAttribute(&quot;product&quot;, product);&#10;        request.getRequestDispatcher(&quot;/view/page/admin/product-form.jsp&quot;).forward(request, response);&#10;    }&#10;&#10;    private void addProduct(HttpServletRequest request, HttpServletResponse response) &#10;            throws IOException {&#10;        String name = request.getParameter(&quot;name&quot;);&#10;        double price = Double.parseDouble(request.getParameter(&quot;price&quot;));&#10;        String size = request.getParameter(&quot;size&quot;);&#10;        String description = request.getParameter(&quot;description&quot;);&#10;        String imageUrl = request.getParameter(&quot;image_url&quot;);&#10;        boolean bestSeller = Boolean.parseBoolean(request.getParameter(&quot;best_seller&quot;));&#10;        int stock = Integer.parseInt(request.getParameter(&quot;stock&quot;));&#10;&#10;        Product product = new Product(name, price, size, description, imageUrl, bestSeller, stock);&#10;        productService.addProduct(product);&#10;        response.sendRedirect(request.getContextPath() + &quot;/admin/products/list&quot;);&#10;    }&#10;&#10;    private void updateProduct(HttpServletRequest request, HttpServletResponse response) &#10;            throws IOException {&#10;        String id = request.getParameter(&quot;id&quot;);&#10;        String name = request.getParameter(&quot;name&quot;);&#10;        double price = Double.parseDouble(request.getParameter(&quot;price&quot;));&#10;        String size = request.getParameter(&quot;size&quot;);&#10;        String description = request.getParameter(&quot;description&quot;);&#10;        String imageUrl = request.getParameter(&quot;image_url&quot;);&#10;        boolean bestSeller = Boolean.parseBoolean(request.getParameter(&quot;best_seller&quot;));&#10;        int stock = Integer.parseInt(request.getParameter(&quot;stock&quot;));&#10;&#10;        Product product = new Product(id, name, price, size, description, imageUrl, bestSeller, stock);&#10;        productService.updateProduct(product);&#10;        response.sendRedirect(request.getContextPath() + &quot;/admin/products/list&quot;);&#10;    }&#10;&#10;    private void deleteProduct(HttpServletRequest request, HttpServletResponse response) &#10;            throws IOException {&#10;        String id = request.getParameter(&quot;id&quot;);&#10;        productService.deleteProduct(id);&#10;        response.sendRedirect(request.getContextPath() + &quot;/admin/products/list&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        productService.close();&#10;        super.destroy();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/demo/servlet/UserServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/demo/servlet/UserServlet.java" />
              <option name="updatedContent" value="package org.example.demo.servlet;&#10;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.example.demo.models.UserModel;&#10;import org.example.demo.service.UserService;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet(name = &quot;UserServlet&quot;, urlPatterns = {&quot;/auth/*&quot;})&#10;public class UserServlet extends HttpServlet {&#10;    private UserService userService;&#10;&#10;    @Override&#10;    public void init() throws ServletException {&#10;        super.init();&#10;        userService = new UserService();&#10;    }&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) &#10;            throws ServletException, IOException {&#10;        String action = request.getPathInfo();&#10;        if (action == null) {&#10;            action = &quot;/&quot;;&#10;        }&#10;&#10;        switch (action) {&#10;            case &quot;/login&quot;:&#10;                request.getRequestDispatcher(&quot;/view/loginSession.jsp&quot;).forward(request, response);&#10;                break;&#10;            case &quot;/register&quot;:&#10;                request.getRequestDispatcher(&quot;/view/register.jsp&quot;).forward(request, response);&#10;                break;&#10;            case &quot;/logout&quot;:&#10;                logout(request, response);&#10;                break;&#10;            default:&#10;                response.sendRedirect(request.getContextPath() + &quot;/auth/login&quot;);&#10;                break;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest request, HttpServletResponse response) &#10;            throws ServletException, IOException {&#10;        String action = request.getPathInfo();&#10;        if (action == null) {&#10;            action = &quot;/&quot;;&#10;        }&#10;&#10;        switch (action) {&#10;            case &quot;/login&quot;:&#10;                login(request, response);&#10;                break;&#10;            case &quot;/register&quot;:&#10;                register(request, response);&#10;                break;&#10;            default:&#10;                response.sendRedirect(request.getContextPath() + &quot;/auth/login&quot;);&#10;                break;&#10;        }&#10;    }&#10;&#10;    private void login(HttpServletRequest request, HttpServletResponse response) &#10;            throws ServletException, IOException {&#10;        String username = request.getParameter(&quot;username&quot;);&#10;        String password = request.getParameter(&quot;password&quot;);&#10;&#10;        UserModel user = userService.login(username);&#10;        &#10;        if (user != null &amp;&amp; user.getPassword().equals(password)) {&#10;            HttpSession session = request.getSession();&#10;            session.setAttribute(&quot;user&quot;, user);&#10;            &#10;            if (&quot;admin&quot;.equals(user.getRole())) {&#10;                response.sendRedirect(request.getContextPath() + &quot;/admin/products/list&quot;);&#10;            } else {&#10;                response.sendRedirect(request.getContextPath() + &quot;/&quot;);&#10;            }&#10;        } else {&#10;            request.setAttribute(&quot;error&quot;, &quot;Invalid username or password&quot;);&#10;            request.getRequestDispatcher(&quot;/view/loginSession.jsp&quot;).forward(request, response);&#10;        }&#10;    }&#10;&#10;    private void register(HttpServletRequest request, HttpServletResponse response) &#10;            throws ServletException, IOException {&#10;        String username = request.getParameter(&quot;username&quot;);&#10;        String password = request.getParameter(&quot;password&quot;);&#10;        String email = request.getParameter(&quot;email&quot;);&#10;        &#10;        UserModel existingUser = userService.login(username);&#10;        if (existingUser != null) {&#10;            request.setAttribute(&quot;error&quot;, &quot;Username already exists&quot;);&#10;            request.getRequestDispatcher(&quot;/view/register.jsp&quot;).forward(request, response);&#10;            return;&#10;        }&#10;&#10;        UserModel user = new UserModel(java.util.UUID.randomUUID().toString(), &#10;                                     username, &#10;                                     password, &#10;                                     email, &#10;                                     &quot;user&quot;);&#10;        userService.registerUser(user);&#10;        response.sendRedirect(request.getContextPath() + &quot;/auth/login&quot;);&#10;    }&#10;&#10;    private void logout(HttpServletRequest request, HttpServletResponse response) &#10;            throws IOException {&#10;        HttpSession session = request.getSession(false);&#10;        if (session != null) {&#10;            session.invalidate();&#10;        }&#10;        response.sendRedirect(request.getContextPath() + &quot;/auth/login&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void destroy() {&#10;        userService.close();&#10;        super.destroy();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/META-INF/persistence.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/META-INF/persistence.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#10;&lt;persistence xmlns=&quot;https://jakarta.ee/xml/ns/persistence&quot;&#10;             xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;             xsi:schemaLocation=&quot;https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd&quot;&#10;             version=&quot;3.0&quot;&gt;&#10;    &lt;persistence-unit name=&quot;default&quot;&gt;&#10;        &lt;properties&gt;&#10;            &lt;property name=&quot;jakarta.persistence.jdbc.driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;&#10;            &lt;property name=&quot;jakarta.persistence.jdbc.url&quot; value=&quot;jdbc:mysql://localhost:3306/milkteashop?useSSL=false&quot;/&gt;&#10;            &lt;property name=&quot;jakarta.persistence.jdbc.user&quot; value=&quot;root&quot;/&gt;&#10;            &lt;property name=&quot;jakarta.persistence.jdbc.password&quot; value=&quot;123456&quot;/&gt;&#10;&#10;            &lt;!-- Hibernate properties --&gt;&#10;            &lt;property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;update&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.dialect&quot; value=&quot;org.hibernate.dialect.MySQLDialect&quot;/&gt;&#10;        &lt;/properties&gt;&#10;    &lt;/persistence-unit&gt;&#10;&lt;/persistence&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#10;&lt;persistence xmlns=&quot;https://jakarta.ee/xml/ns/persistence&quot;&#10;             xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;             xsi:schemaLocation=&quot;https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd&quot;&#10;             version=&quot;3.0&quot;&gt;&#10;    &lt;persistence-unit name=&quot;default&quot;&gt;&#10;        &lt;properties&gt;&#10;            &lt;!-- Database connection settings --&gt;&#10;            &lt;property name=&quot;jakarta.persistence.jdbc.driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;&#10;            &lt;property name=&quot;jakarta.persistence.jdbc.url&quot; value=&quot;jdbc:mysql://localhost:3306/milkteashop?useSSL=false&quot;/&gt;&#10;            &lt;property name=&quot;jakarta.persistence.jdbc.user&quot; value=&quot;root&quot;/&gt;&#10;            &lt;property name=&quot;jakarta.persistence.jdbc.password&quot; value=&quot;123456&quot;/&gt;&#10;            &#10;            &lt;!-- Hibernate properties --&gt;&#10;            &lt;property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;update&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.dialect&quot; value=&quot;org.hibernate.dialect.MySQLDialect&quot;/&gt;&#10;            &#10;            &lt;!-- Cache settings --&gt;&#10;            &lt;property name=&quot;hibernate.cache.use_second_level_cache&quot; value=&quot;false&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.cache.use_query_cache&quot; value=&quot;false&quot;/&gt;&#10;            &lt;property name=&quot;hibernate.cache.auto_evict_collection_cache&quot; value=&quot;true&quot;/&gt;&#10;        &lt;/properties&gt;&#10;    &lt;/persistence-unit&gt;&#10;&lt;/persistence&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/db/migration/V1__alter_users_orders.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/db/migration/V1__alter_users_orders.sql" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/view/layout/admin/adminLayout.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/view/layout/admin/adminLayout.jsp" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/view/layout/admin/header.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/view/layout/admin/header.jsp" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/view/layout/base.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/view/layout/base.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/view/page/admin/manageProduct-content.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/view/page/admin/manageProduct-content.jsp" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/view/page/admin/manageProduct.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/view/page/admin/manageProduct.jsp" />
              <option name="originalContent" value="&lt;%--&#10;  Created by IntelliJ IDEA.&#10;  User: macpro&#10;  Date: 29/8/25&#10;  Time: 10:20&#10;  To change this template use File | Settings | File Templates.&#10;--%&gt;&#10;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;vi&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Trang Quản Trị Sản Phẩm&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;script&gt;&#10;        tailwind.config = {&#10;            theme: {&#10;                extend: {&#10;                    colors: {&#10;                        'primary': '#3490dc',&#10;                        'secondary': '#ffed4a',&#10;                        'danger': '#e3342f',&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    &lt;/script&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-gray-100 font-sans  leading-normal tracking-normal&quot;&gt;&#10;&#10;    &lt;div class=&quot;flex md:flex-row flex-col&quot;&gt;&#10;        &lt;%@ include file=&quot;../../layout/admin/sidebar.jsp&quot; %&gt;&#10;&#10;        &lt;div class=&quot;flex-1 p-8&quot;&gt;&#10;            &lt;h1 class=&quot;text-3xl font-bold text-gray-800 mb-6&quot;&gt;Quản lý sản phẩm&lt;/h1&gt;&#10;&#10;            &lt;div class=&quot;flex flex-col md:flex-row justify-between items-center mb-6&quot;&gt;&#10;                &lt;div class=&quot;relative w-full md:w-1/3&quot;&gt;&#10;                        &lt;span class=&quot;absolute inset-y-0 left-0 flex items-center pl-3&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-search text-gray-400&quot;&gt;&lt;/i&gt;&#10;                        &lt;/span&gt;&#10;                    &lt;input type=&quot;text&quot; placeholder=&quot;Tìm kiếm sản phẩm...&quot; class=&quot;w-full pl-10 pr-4 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;button class=&quot;w-full md:w-auto mt-4 md:mt-0 bg-primary hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg shadow&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt; Thêm sản phẩm mới&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow-lg overflow-hidden&quot;&gt;&#10;                &lt;div class=&quot;overflow-x-auto&quot;&gt;&#10;                    &lt;table class=&quot;w-full table-auto&quot;&gt;&#10;                        &lt;thead class=&quot;bg-gray-200 text-gray-600 uppercase text-sm leading-normal&quot;&gt;&#10;                        &lt;tr&gt;&#10;                            &lt;th class=&quot;py-3 px-6 text-left&quot;&gt;ID&lt;/th&gt;&#10;                            &lt;th class=&quot;py-3 px-6 text-left&quot;&gt;Sản phẩm&lt;/th&gt;&#10;                            &lt;th class=&quot;py-3 px-6 text-center&quot;&gt;Giá&lt;/th&gt;&#10;                            &lt;th class=&quot;py-3 px-6 text-center&quot;&gt;Số lượng&lt;/th&gt;&#10;                            &lt;th class=&quot;py-3 px-6 text-center&quot;&gt;Trạng thái&lt;/th&gt;&#10;                            &lt;th class=&quot;py-3 px-6 text-center&quot;&gt;Hành động&lt;/th&gt;&#10;                        &lt;/tr&gt;&#10;                        &lt;/thead&gt;&#10;                        &lt;tbody class=&quot;text-gray-600 text-sm font-light&quot;&gt;&#10;                        &lt;tr class=&quot;border-b border-gray-200 hover:bg-gray-100&quot;&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-left whitespace-nowrap&quot;&gt;#1201&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-left&quot;&gt;&#10;                                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                                    &lt;img class=&quot;w-10 h-10 rounded-full mr-4&quot; src=&quot;https://via.placeholder.com/40&quot; alt=&quot;Avatar&quot;&gt;&#10;                                    &lt;span class=&quot;font-medium&quot;&gt;iPhone 15 Pro Max&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;32,000,000đ&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;99&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;&#10;                                &lt;span class=&quot;bg-green-200 text-green-600 py-1 px-3 rounded-full text-xs&quot;&gt;Còn hàng&lt;/span&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;&#10;                                &lt;div class=&quot;flex item-center justify-center&quot;&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-purple-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-yellow-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-pencil-alt&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-red-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                        &lt;/tr&gt;&#10;                        &lt;tr class=&quot;border-b border-gray-200 hover:bg-gray-100&quot;&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-left whitespace-nowrap&quot;&gt;#1202&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-left&quot;&gt;&#10;                                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                                    &lt;img class=&quot;w-10 h-10 rounded-full mr-4&quot; src=&quot;https://via.placeholder.com/40&quot; alt=&quot;Avatar&quot;&gt;&#10;                                    &lt;span class=&quot;font-medium&quot;&gt;Macbook Pro M3&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;55,000,000đ&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;35&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;&#10;                                &lt;span class=&quot;bg-green-200 text-green-600 py-1 px-3 rounded-full text-xs&quot;&gt;Còn hàng&lt;/span&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;&#10;                                &lt;div class=&quot;flex item-center justify-center&quot;&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-purple-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-yellow-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-pencil-alt&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-red-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                        &lt;/tr&gt;&#10;                        &lt;tr class=&quot;border-b border-gray-200 hover:bg-gray-100&quot;&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-left whitespace-nowrap&quot;&gt;#1203&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-left&quot;&gt;&#10;                                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                                    &lt;img class=&quot;w-10 h-10 rounded-full mr-4&quot; src=&quot;https://via.placeholder.com/40&quot; alt=&quot;Avatar&quot;&gt;&#10;                                    &lt;span class=&quot;font-medium&quot;&gt;Sony WH-1000XM5&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;7,500,000đ&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;0&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;&#10;                                &lt;span class=&quot;bg-red-200 text-red-600 py-1 px-3 rounded-full text-xs&quot;&gt;Hết hàng&lt;/span&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;&#10;                                &lt;div class=&quot;flex item-center justify-center&quot;&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-purple-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-yellow-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-pencil-alt&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-red-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                        &lt;/tr&gt;&#10;                        &lt;/tbody&gt;&#10;                    &lt;/table&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div class=&quot;py-4 px-6 border-t-2 border-gray-200&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Hiển thị 1 đến 3 của 15 kết quả&lt;/p&gt;&#10;                        &lt;div class=&quot;flex items-center&quot;&gt;&#10;                            &lt;button class=&quot;text-sm bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-l&quot;&gt;&#10;                                Trước&#10;                            &lt;/button&gt;&#10;                            &lt;button class=&quot;text-sm bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-r&quot;&gt;&#10;                                Sau&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;%--&#10;  Created by IntelliJ IDEA.&#10;  User: macpro&#10;  Date: 29/8/25&#10;  Time: 10:20&#10;  To change this template use File | Settings | File Templates.&#10;--%&gt;&#10;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;vi&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Trang Quản Trị Sản Phẩm&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;script&gt;&#10;        tailwind.config = {&#10;            theme: {&#10;                extend: {&#10;                    colors: {&#10;                        'primary': '#3490dc',&#10;                        'secondary': '#ffed4a',&#10;                        'danger': '#e3342f',&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    &lt;/script&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-gray-100 font-sans  leading-normal tracking-normal&quot;&gt;&#10;&#10;    &lt;div class=&quot;flex md:flex-row flex-col&quot;&gt;&#10;        &lt;%@ include file=&quot;../../layout/admin/sidebar.jsp&quot; %&gt;&#10;&#10;        &lt;div class=&quot;flex-1 p-8&quot;&gt;&#10;            &lt;h1 class=&quot;text-3xl font-bold text-gray-800 mb-6&quot;&gt;Quản lý sản phẩm&lt;/h1&gt;&#10;&#10;            &lt;div class=&quot;flex flex-col md:flex-row justify-between items-center mb-6&quot;&gt;&#10;                &lt;div class=&quot;relative w-full md:w-1/3&quot;&gt;&#10;                        &lt;span class=&quot;absolute inset-y-0 left-0 flex items-center pl-3&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-search text-gray-400&quot;&gt;&lt;/i&gt;&#10;                        &lt;/span&gt;&#10;                    &lt;input type=&quot;text&quot; placeholder=&quot;Tìm kiếm sản phẩm...&quot; class=&quot;w-full pl-10 pr-4 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;button class=&quot;w-full md:w-auto mt-4 md:mt-0 bg-primary hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg shadow&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt; Thêm sản phẩm mới&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;bg-white rounded-lg shadow-lg overflow-hidden&quot;&gt;&#10;                &lt;div class=&quot;overflow-x-auto&quot;&gt;&#10;                    &lt;table class=&quot;w-full table-auto&quot;&gt;&#10;                        &lt;thead class=&quot;bg-gray-200 text-gray-600 uppercase text-sm leading-normal&quot;&gt;&#10;                        &lt;tr&gt;&#10;                            &lt;th class=&quot;py-3 px-6 text-left&quot;&gt;ID&lt;/th&gt;&#10;                            &lt;th class=&quot;py-3 px-6 text-left&quot;&gt;Sản phẩm&lt;/th&gt;&#10;                            &lt;th class=&quot;py-3 px-6 text-center&quot;&gt;Giá&lt;/th&gt;&#10;                            &lt;th class=&quot;py-3 px-6 text-center&quot;&gt;Số lượng&lt;/th&gt;&#10;                            &lt;th class=&quot;py-3 px-6 text-center&quot;&gt;Trạng thái&lt;/th&gt;&#10;                            &lt;th class=&quot;py-3 px-6 text-center&quot;&gt;Hành động&lt;/th&gt;&#10;                        &lt;/tr&gt;&#10;                        &lt;/thead&gt;&#10;                        &lt;tbody class=&quot;text-gray-600 text-sm font-light&quot;&gt;&#10;                        &lt;tr class=&quot;border-b border-gray-200 hover:bg-gray-100&quot;&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-left whitespace-nowrap&quot;&gt;#1201&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-left&quot;&gt;&#10;                                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                                    &lt;img class=&quot;w-10 h-10 rounded-full mr-4&quot; src=&quot;https://via.placeholder.com/40&quot; alt=&quot;Avatar&quot;&gt;&#10;                                    &lt;span class=&quot;font-medium&quot;&gt;iPhone 15 Pro Max&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;32,000,000đ&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;99&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;&#10;                                &lt;span class=&quot;bg-green-200 text-green-600 py-1 px-3 rounded-full text-xs&quot;&gt;Còn hàng&lt;/span&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;&#10;                                &lt;div class=&quot;flex item-center justify-center&quot;&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-purple-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-yellow-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-pencil-alt&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-red-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                        &lt;/tr&gt;&#10;                        &lt;tr class=&quot;border-b border-gray-200 hover:bg-gray-100&quot;&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-left whitespace-nowrap&quot;&gt;#1202&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-left&quot;&gt;&#10;                                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                                    &lt;img class=&quot;w-10 h-10 rounded-full mr-4&quot; src=&quot;https://via.placeholder.com/40&quot; alt=&quot;Avatar&quot;&gt;&#10;                                    &lt;span class=&quot;font-medium&quot;&gt;Macbook Pro M3&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;55,000,000đ&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;35&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;&#10;                                &lt;span class=&quot;bg-green-200 text-green-600 py-1 px-3 rounded-full text-xs&quot;&gt;Còn hàng&lt;/span&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;&#10;                                &lt;div class=&quot;flex item-center justify-center&quot;&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-purple-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-yellow-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-pencil-alt&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-red-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                        &lt;/tr&gt;&#10;                        &lt;tr class=&quot;border-b border-gray-200 hover:bg-gray-100&quot;&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-left whitespace-nowrap&quot;&gt;#1203&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-left&quot;&gt;&#10;                                &lt;div class=&quot;flex items-center&quot;&gt;&#10;                                    &lt;img class=&quot;w-10 h-10 rounded-full mr-4&quot; src=&quot;https://via.placeholder.com/40&quot; alt=&quot;Avatar&quot;&gt;&#10;                                    &lt;span class=&quot;font-medium&quot;&gt;Sony WH-1000XM5&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;7,500,000đ&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;0&lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;&#10;                                &lt;span class=&quot;bg-red-200 text-red-600 py-1 px-3 rounded-full text-xs&quot;&gt;Hết hàng&lt;/span&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;py-3 px-6 text-center&quot;&gt;&#10;                                &lt;div class=&quot;flex item-center justify-center&quot;&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-purple-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-eye&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-yellow-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-pencil-alt&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;w-6 mr-2 transform hover:text-red-500 hover:scale-110 cursor-pointer&quot;&gt;&#10;                                        &lt;i class=&quot;fas fa-trash-alt&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                        &lt;/tr&gt;&#10;                        &lt;/tbody&gt;&#10;                    &lt;/table&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div class=&quot;py-4 px-6 border-t-2 border-gray-200&quot;&gt;&#10;                    &lt;div class=&quot;flex items-center justify-between&quot;&gt;&#10;                        &lt;p class=&quot;text-sm text-gray-600&quot;&gt;Hiển thị 1 đến 3 của 15 kết quả&lt;/p&gt;&#10;                        &lt;div class=&quot;flex items-center&quot;&gt;&#10;                            &lt;button class=&quot;text-sm bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-l&quot;&gt;&#10;                                Trước&#10;                            &lt;/button&gt;&#10;                            &lt;button class=&quot;text-sm bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-r&quot;&gt;&#10;                                Sau&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>